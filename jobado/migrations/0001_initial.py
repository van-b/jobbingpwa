# Generated by Django 2.2.4 on 2019-08-29 14:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='nom')),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name_plural': 'Villes',
                'verbose_name': 'Ville',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='nom')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='jobado.City')),
            ],
            options={
                'verbose_name_plural': 'Quartiers',
                'verbose_name': 'Quartier',
            },
        ),
        migrations.CreateModel(
            name='CustumUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', models.CharField(choices=[('femme', 'F'), ('homme', 'M')], default='homme', max_length=5, verbose_name='sexe')),
                ('last_name', models.CharField(max_length=150, verbose_name='nom(s)')),
                ('first_name', models.CharField(max_length=30, verbose_name='prenom(s)')),
                ('username', models.CharField(error_messages={'unique': 'Un utilisateur avec ce pseudo existe deja.'}, help_text='Obligatoire,seulement des lettres, chiffres et @/./+/-/_ ', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='pseudo')),
                ('email', models.EmailField(max_length=254, verbose_name='adresse email')),
                ('password', models.CharField(help_text='donner un mot de passe fort', max_length=128, verbose_name='mot de passe')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='numéro de téléphone')),
                ('photo', models.ImageField(upload_to='profile_images/', verbose_name='image de profil')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date inscription')),
                ('is_active', models.BooleanField(default=True, help_text="designe si l'utilisateur a le droit de se connecter au site", verbose_name='actif')),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='particuliers', to='jobado.District', verbose_name='quartier')),
                ('groups', models.ManyToManyField(blank=True, help_text='un utilisateur appartenant a ce groupe aura les autorisations associees', related_name='groupes_utilisateur', related_query_name='utilisateur', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='autorisations specifiques pour cet utilisateur.', related_name='permissions', to='auth.Permission', verbose_name="permissions_de_l'utilisateur")),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
